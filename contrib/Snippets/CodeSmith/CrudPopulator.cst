<%@ CodeTemplate Language="C#" TargetLanguage="C#" Description="TestFu DatabasePopulator Crud Harness" %>
<%@ Property Name="Namespace" Type="System.String" 
	Default="Populators" 
	Category="Output" 
	Description="Namespace of the populator." %>
<%@ Property Name="DataSetNameFormat" Type="System.String" 
	Default="{0}DataSet" 
	Category="Output" 
	Description="Format string to create the DatabaseSet class name." %>
<%@ Property Name="CrudPopulatorNameFormat" Type="System.String" 
	Default="{0}CrudPopulator" 
	Category="Output" 
	Description="Format string to create the CrudPopulator class name." %>
<%@ Property Name="DatabasePopulatorNameFormat" Type="System.String" 
	Default="{0}DatabasePopulator" 
	Category="Output" 
	Description="Format string to create the DatabasePopulator class name." %>
<%@ Property Name="TableNamePrefix" Type="System.String" 
	Default="" 
	Category="Output" 
	Optional="true"
	Description="Prefix to be removed." %>
<%@ Property Name="TablePopulatorNameFormat" Type="System.String" 
	Default="{0}TablePopulator" 
	Category="Output" 
	Description="Format string to create the TablePopulator class names." %>
<%@ Property Name="ColumnDataGeneratorNameFormat" Type="System.String" 
	Default="{0}DataGenerator" 
	Category="Output" 
	Description="Format string to create the ColumnGenenerator properties." %>
<%@ Property Name="UniqueValidatorNameFormat" Type="System.String" 
	Default="{0}Validator" 
	Category="Output" 
	Description="Format string to create the UniqueValidator properties." %>
<%@ Property Name="ForeignKeyProviderNameFormat" Type="System.String" 
	Default="{0}Provider" 
	Category="Output" 
	Description="Format string to create the ForeignKeyProviderNameFormat properties." %>
<%@ Property Name="Database" Type="SchemaExplorer.DatabaseSchema"
      Category="Context"
      Description="Target database for the IDatabasePopulator." %> 
<%@ Assembly Name="SchemaExplorer" %> 
<%@ Import Namespace="SchemaExplorer" %>
//////////////////////////////////////////////////////////////////
//
// Strongly typed CRUD populator for the <%= DatabaseName %>
//
// This file was generated by CodeSmith. Do not edit it! Modify
// the template if you need to tweak it for you.
//
//////////////////////////////////////////////////////////////////

using System;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;

using MbUnit.Core.Framework;
using MbUnit.Framework;

using TestFu.Data;
using TestFu.Data.SqlClient;
using TestFu.Data.Graph;

namespace <%= Namespace %>
{
	/// <summary>
	/// A CRUD harness for the <%= DatabaseName %> database.
	/// </summary>
	/// <remarks>
	/// <para><b>Note to implementors:</b></para>
	/// <para>
	/// Implementors should modify the CodeSmith template that generated
	/// this class to inject their Create,Update,Read and Delete methods.
	/// Each generated method contains a <see cref="NotImplementedException"/>
	/// that should be replaced with the proper DAL code.
	/// </para>
	/// <para>
	/// The <c>Create*</c> methods create a new row and verify that it is
	/// present in the database using the <c>Read*</c> methods.
	/// The <c>Update*</c> methods apply an update between two rows and
	/// verify that the update was succesful using <c>Read*</c> methods.
	/// The <c>Delete*</c> remove a row from the tables and verify
	/// that it has been removed using <c>Read*</c> methods.
	/// </para>
	/// <remarks>
	public class <%= CrudPopulatorName %> : <%= DatabasePopulatorName %>
	{
		#region Constructors
		/// <summary>
		/// Initializes a new <see cref="<%= CrudPopulatorName %>"/> with the 
		/// connection string of the database.
		/// </summary>
		/// <param name="connectionString">
		/// A valid conneciton string to the target database.
		/// </param>
		/// <exception type="ArgumentNullException">
		/// The <paramref name="connectionString"/> is a 
		/// null reference (Nothing in Visual Basic).
		/// </exception>		
		/// <exception type="ArgumentException">
		/// The <paramref name="connectionString"/> is empty.
		/// </exception>		
		public <%= CrudPopulatorName %>(string connectionString)
		:this(new <%= DataSetName %>(), connectionString)
		{}
		
		/// <summary>
		/// Initializes a new <see cref="<%= CrudPopulatorName %>"/> with the 
		/// connection string of the database.
		/// </summary>
		/// <param name="dataSet">
		/// A <see cref="DataSet"/> representing the structure of the
		/// <em><%= DatabaseName %></em> database.
		/// </param>
		/// <param name="connectionString">
		/// A valid conneciton string to the target database.
		/// </param>
		/// <exception type="ArgumentNullException">
		/// The <paramref name="dataSet"/> or the <paramref name="connectionString"/> is a 
		/// null reference (Nothing in Visual Basic).
		/// </exception>		
		/// <exception type="ArgumentException">
		/// The <paramref name="connectionString"/> is empty.
		/// </exception>				
		public <%= CrudPopulatorName %>(
			DataSet dataSet,
			string connectionString
			)
		:base(dataSet,connectionString)
		{}
		#endregion
		
<% foreach(TableSchema table in this.Database.Tables) {%>
		#region <%= table.Name %>
		/// <summary>
		/// Creates a new <see cref="DataRow"/> in the
		/// <em><%= table.Name %> table.
		/// </summary>
		/// <returns>
		/// The created <see cref="DataRow"/> instance
		/// </returns>
		public virtual DataRow Create<%= Format(table.Name) %>()
		{
			// generate row
			DataRow row = this.<%=GetTablePopulatorPropertyName(table)%>.Generate();
			// extract info
<% foreach(ColumnSchema column in table.Columns) {%>		
			Sql<%= column.SystemType.Name %> <%= FormatLower(column.Name) %> = (Sql<%= column.SystemType.Name %>)row["<%= column.Name%>"];
<% } // foreach(ColumnSchema column in table.Columns) %>			
		
			// TODO: add the row to the <%= table.Name %> table here
			throw new NotImplementedException();

			// check Create has been successfull
			DataRow readRow = Read<%= Format(table.Name)%>(row);
			if (readRow==null)
			{
				DisplayRow(row);
				Assert.Fail("Row creation failed");
			}
			
			return row;
		}	
		
		/// <summary>
		/// Updates a row (chosen randomly) with a new generated row in the
		/// <em><%= table.Name %> table.
		/// </summary>
		/// <returns>
		/// The update <see cref="DataRow"/> instance
		/// </returns>
		public virtual DataRow Update<%= Format(table.Name) %>()
		{
			// generate row
			DataRow row = this.<%=GetTablePopulatorPropertyName(table)%>.Generate();
			// update random
			return Update<%= Format(table.Name) %>(row);
		}		

		/// <summary>
		/// Updates a row (chosen randomly) with a <see cref="DataRow"/> in the
		/// <em><%= table.Name %> table.
		/// </summary>
		/// <returns>
		/// The update <see cref="DataRow"/> instance
		/// </returns>
		public virtual DataRow Update<%= Format(table.Name) %>(DataRow row)
		{
			if (row==null)
				throw new ArgumentNullException("row");
			// choose a row
			DataRow rowToUpdate = this.<%=GetTablePopulatorPropertyName(table)%>.GetRandomRow();
			return Update<%= Format(table.Name) %>(row, rowToUpdate);
		}
		
		/// <summary>
		/// Updates <paramref name="row"/> with <paramref name="rowToUpdate"/> in the
		/// <em><%= table.Name %> table.
		/// </summary>
		/// <returns>
		/// The update <see cref="DataRow"/> instance
		/// </returns>
		public virtual DataRow Update<%= Format(table.Name) %>(DataRow row, DataRow rowToUpdate)
		{
			if (row==null)
				throw new ArgumentNullException("row");
			if (rowToUpdate==null)
				throw new ArgumentNullException("rowToUpdate");
			// extract info
<% foreach(ColumnSchema column in table.Columns) {%>		
			<%= column.SystemType %> <%= FormatLower(column.Name) %> = (<%= column.SystemType %>)row["<%= column.Name%>"];
<% } // foreach(ColumnSchema column in table.Columns) %>			
					
			// TODO: update the rowToUpdate with row in the <%= table.Name %> table
			throw new NotImplementedException();
			
			// check Update has been successfull
			DataRow readRow = Read<%= Format(table.Name)%>(rowToUpdate);
			if (readRow==null)
			{
				Console.WriteLine("New row:");
				DisplayRow(row);
				Console.WriteLine("Row to update:");
				DisplayRow(rowToUpdate);
				Assert.Fail("Row update failed");
			}
			
			return rowToUpdate;
		}				

		/// <summary>
		/// Deletes a random row
		/// from the <em><%= table.Name %></em> table.
		/// </summary>
		public virtual void Delete<%= Format(table.Name) %>()
		{
			// choose a row
			DataRow row = this.<%=GetTablePopulatorPropertyName(table)%>.GetRandomRow();		
			
			// delete
			this.Delete<%= Format(table.Name) %>(row);
		}
		
		/// <summary>
		/// Deletes the row
		/// from the <em><%= table.Name %></em> table.
		/// </summary>
		public virtual void Delete<%= Format(table.Name) %>(DataRow row)
		{
			if (row==null)
				throw new ArgumentNullException("row");
			// extract info
<% foreach(ColumnSchema column in table.Columns) {%>		
			<%= column.SystemType %> <%= FormatLower(column.Name) %> = (<%= column.SystemType %>)row["<%= column.Name%>"];
<% } // foreach(ColumnSchema column in table.Columns) %>			
			
			// TODO: delete the row from the <%= table.Name %> table
			throw new NotImplementedException();
			
			// check it is not in the table
			DataRow readRow = Read<%= Format(table.Name) %>(row);
			if (readRow!=null)
			{
				Console.WriteLine("Row to delete");
				DisplayRow(row);
				Console.WriteLine("Not deleted row");
				DisplayRow(readRow);
				Assert.Fail("Row delete failed");
			}
		}				
		
		/// <summary>
		/// Reads the <em><%= table.Name %></em> table for a row matching <paramref name="row"/>
		/// and returns it.
		/// </summary>
		/// <returns>
		/// Read <see cref="DataRow"/> row if foud; otherwize
		/// a null reference.
		/// </returns>
		public virtual DataRow Read<%= Format(table.Name) %>(DataRow row)
		{
			if (row==null)
				throw new ArgumentNullException("row");
				
			// extract info
<% foreach(ColumnSchema column in table.Columns) {%>		
			<%= column.SystemType %> <%= FormatLower(column.Name) %> = (<%= column.SystemType %>)row["<%= column.Name%>"];
<% } // foreach(ColumnSchema column in table.Columns) %>			
			
			// TODO: read the data from the db and return the row,
			// if not found, return null
			throw new NotImplementedException();
		}		
		#endregion		
		
<%} // foreach(TableSchema table in this.Database.Tables) %>

		
		protected virtual void DisplayRow(DataRow row)
		{
			if (row==null)
				throw new ArgumentNullException("row");
			foreach(DataColumn column in row.Table.Columns)
			{
				Console.WriteLine("\t{0}: {1}",
					column.ColumnName, 
					row[column].ToString());
			}
		}
	}
}
<script runat="template">
#region Properties
public string DatabaseName
{ 
	get
	{
		return this.Database.Name;
	}
}
public string ToSqlType(ColumnSchema column)
{
	return String.Format("Sql{0}",column.SystemType.Name);
}
public string DataSetName
{
	get{ return Format(this.DataSetNameFormat, this.DatabaseName);}
}
public string CrudPopulatorName
{
	get{ return Format(this.CrudPopulatorNameFormat,this.DatabaseName);}
}
public string DatabasePopulatorName
{
	get{ return Format(this.DatabasePopulatorNameFormat,this.DatabaseName);}
}
public string GetTablePopulatorName(TableSchema table)
{
	return Format(this.TablePopulatorNameFormat, table.Name);
}
public string GetTablePopulatorPropertyName(TableSchema table)
{
	return Format(table.Name);
}
public string GetColumnDataGeneratorName(ColumnSchema column)
{
	return Format(ColumnDataGeneratorNameFormat, column.Name);
}
public string GetUniqueValidatorName(TableKeySchema unique)
{
	return  Format(UniqueValidatorNameFormat, unique.Name);
}
public string GetForeignKeyProviderName(TableKeySchema unique)
{
	return  Format(ForeignKeyProviderNameFormat, unique.Name);
}
protected string FormatLower(string format, params object[] args)
{
	string s= Format(format,args);
	return Char.ToLower(s[0]) + s.Substring(1);
}
protected string Format(string format, params Object[] args)
{
	string result = string.Format(format,args);
	if (this.TableNamePrefix!=null && this.TableNamePrefix.Length > 0)
	{
		if (result.StartsWith(this.TableNamePrefix))
			result = result.Substring(this.TableNamePrefix.Length);
	}
	
	result = result.Replace(" ","").Replace("_","").Replace(".","");
	return result;
}

#endregion
</script>