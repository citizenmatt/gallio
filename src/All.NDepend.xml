<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<NDepend AppName="All">
  <OutputDir KeepHistoric="True" KeepXmlFiles="True">C:\Source\MbUnit\v3\src\NDependOut</OutputDir>
  <Dirs>
    <Dir>C:\Source\MbUnit\v3\src\Extensions\Echo\Gallio.Echo\bin</Dir>
    <Dir>C:\Source\MbUnit\v3\src\Extensions\Icarus\Gallio.Icarus\bin</Dir>
    <Dir>C:\Source\MbUnit\v3\src\Extensions\Echo\Gallio.Echo.Tests\bin</Dir>
    <Dir>C:\Source\MbUnit\v3\src\Extensions\Icarus\Gallio.Icarus.Tests\bin</Dir>
    <Dir>C:\Source\MbUnit\v3\src\Gallio\Gallio\bin</Dir>
    <Dir>C:\Source\MbUnit\v3\src\Gallio\Gallio.Tests\bin</Dir>
    <Dir>C:\Source\MbUnit\v3\src\Extensions\Reports\Gallio.Reports\bin</Dir>
    <Dir>C:\Source\MbUnit\v3\src\MbUnit\MbUnit\bin</Dir>
    <Dir>C:\Source\MbUnit\v3\src\MbUnit\MbUnit.Tests\bin</Dir>
    <Dir>C:\Source\MbUnit\v3\src\MbUnit\Samples\MbUnit.Samples\bin</Dir>
    <Dir>C:\Source\MbUnit\v3\src\MbUnit\MbUnit.Compatibility\bin</Dir>
    <Dir>C:\Source\MbUnit\v3\src\Extensions\Reports\Gallio.Reports.Tests\bin</Dir>
    <Dir>C:\Source\MbUnit\v3\src\Gallio\Gallio.Host\bin</Dir>
    <Dir>C:\Source\MbUnit\v3\src\MbUnit\MbUnit.TestResources\bin</Dir>
    <Dir>C:\Source\MbUnit\v3\src\Extensions\Xunit\Gallio.XunitAdapter\bin</Dir>
    <Dir>C:\Source\MbUnit\v3\src\Extensions\Xunit\Gallio.XunitAdapter.Tests\bin</Dir>
    <Dir>C:\Source\MbUnit\v3\src\Extensions\Xunit\Gallio.XunitAdapter.TestResources\bin</Dir>
    <Dir>C:\Source\MbUnit\v3\src\Extensions\NUnit\Gallio.NUnitAdapter\bin</Dir>
    <Dir>C:\Source\MbUnit\v3\src\Extensions\NUnit\Gallio.NUnitAdapter.Tests\bin</Dir>
    <Dir>C:\Source\MbUnit\v3\src\Extensions\NUnit\Gallio.NUnitAdapter.TestResources\bin</Dir>
    <Dir>C:\Source\MbUnit\v3\src\Extensions\MbUnit2\Gallio.MbUnit2Adapter\bin</Dir>
    <Dir>C:\Source\MbUnit\v3\src\Extensions\MbUnit2\Gallio.MbUnit2Adapter.Tests\bin</Dir>
    <Dir>C:\Source\MbUnit\v3\src\Extensions\MbUnit2\Gallio.MbUnit2Adapter.TestResources\bin</Dir>
    <Dir>C:\Source\MbUnit\v3\src\Extensions\ReSharper\Gallio.ReSharperRunner\bin</Dir>
    <Dir>C:\Source\MbUnit\v3\src\Extensions\ReSharper\Gallio.ReSharperRunner.Tests\bin</Dir>
    <Dir>C:\Source\MbUnit\v3\src\Extensions\TDNet\Gallio.TDNetRunner\bin</Dir>
    <Dir>C:\Source\MbUnit\v3\src\Extensions\TDNet\Gallio.TDNetRunner.Tests\bin</Dir>
    <Dir>C:\Source\MbUnit\v3\src\Extensions\MSBuild\Gallio.MSBuildTasks\bin</Dir>
    <Dir>C:\Source\MbUnit\v3\src\Extensions\MSBuild\Gallio.MSBuildTasks.Tests\bin</Dir>
    <Dir>C:\Source\MbUnit\v3\src\Extensions\NAnt\Gallio.NAntTasks\bin</Dir>
    <Dir>C:\Source\MbUnit\v3\src\Extensions\NAnt\Gallio.NAntTasks.Tests\bin</Dir>
    <Dir>C:\Source\MbUnit\v3\src\Extensions\PowerShell\Gallio.PowerShellCommands\bin</Dir>
    <Dir>C:\Source\MbUnit\v3\src\Extensions\PowerShell\Gallio.PowerShellCommands.Tests\bin</Dir>
    <Dir>C:\Source\MbUnit\v3\src\Extensions\CCNet\CCNet.Gallio.WebDashboard.Plugin\bin</Dir>
    <Dir>C:\Source\MbUnit\v3\src\Extensions\NCover\Gallio.NCoverIntegration\bin</Dir>
    <Dir>C:\Source\MbUnit\v3\src\Extensions\NCover\Gallio.NCoverIntegration.Tests\bin</Dir>
    <Dir>C:\Source\MbUnit\v3\src\Extensions\TypeMock\Gallio.TypeMockIntegration\bin</Dir>
    <Dir>C:\Source\MbUnit\v3\src\Extensions\TypeMock\Gallio.TypeMockIntegration.Tests\bin</Dir>
    <Dir>C:\WINDOWS\Microsoft.NET\Framework\v2.0.50727</Dir>
  </Dirs>
  <Assemblies>
    <Name Warn="True">Gallio.Echo</Name>
    <Name Warn="True">Gallio.Icarus</Name>
    <Name Warn="True">Gallio</Name>
    <Name Warn="True">Gallio.Reports</Name>
    <Name Warn="True">MbUnit</Name>
    <Name Warn="True">MbUnit.Compatibility</Name>
    <Name Warn="True">Gallio.Host</Name>
    <Name Warn="True">Gallio.XunitAdapter</Name>
    <Name Warn="True">Gallio.NUnitAdapter</Name>
    <Name Warn="True">Gallio.MbUnit2Adapter</Name>
    <Name Warn="True">Gallio.ReSharperRunner</Name>
    <Name Warn="True">Gallio.TDNetRunner</Name>
    <Name Warn="True">Gallio.MSBuildTasks</Name>
    <Name Warn="True">Gallio.NAntTasks</Name>
    <Name Warn="True">Gallio.PowerShellCommands</Name>
    <Name Warn="True">CCNet.Gallio.WebDashboard.Plugin</Name>
    <Name Warn="True">Gallio.NCoverIntegration</Name>
    <Name Warn="True">Gallio.TypeMockIntegration</Name>
  </Assemblies>
  <FrameworkAssemblies>
    <Name>mscorlib</Name>
    <Name>Castle.Core</Name>
    <Name>System</Name>
    <Name>System.Windows.Forms</Name>
    <Name>WeifenLuo.WinFormsUI.Docking</Name>
    <Name>ZedGraph</Name>
    <Name>System.Drawing</Name>
    <Name>System.Configuration</Name>
    <Name>Rhino.Mocks</Name>
    <Name>Castle.Windsor</Name>
    <Name>System.Xml</Name>
    <Name>Castle.MicroKernel</Name>
    <Name>Castle.DynamicProxy2</Name>
    <Name>System.Runtime.Remoting</Name>
    <Name>ISymWrapper</Name>
    <Name>MbUnit.Framework</Name>
    <Name>System.Data</Name>
    <Name>WatiN.Core</Name>
    <Name>xunit</Name>
    <Name>xunitext</Name>
    <Name>nunit.core.interfaces</Name>
    <Name>nunit.core</Name>
    <Name>nunit.framework</Name>
    <Name>JetBrains.ReSharper.UnitTestExplorer</Name>
    <Name>JetBrains.ReSharper.TreeModelBrowser</Name>
    <Name>JetBrains.Metadata</Name>
    <Name>JetBrains.ReSharper.Psi</Name>
    <Name>JetBrains.ReSharper.ProjectModel</Name>
    <Name>JetBrains.ReSharper.TaskRunnerFramework</Name>
    <Name>JetBrains.Shell</Name>
    <Name>JetBrains.UI</Name>
    <Name>JetBrains.Util</Name>
    <Name>JetBrains.ReSharper.DocumentManager</Name>
    <Name>JetBrains.ReSharper.DocumentModel</Name>
    <Name>TestDriven.Framework</Name>
    <Name>Microsoft.Build.Utilities</Name>
    <Name>Microsoft.Build.Framework</Name>
    <Name>NAnt.Core</Name>
    <Name>System.Management.Automation</Name>
    <Name>System.Configuration.Install</Name>
    <Name>ThoughtWorks.CruiseControl.WebDashboard</Name>
    <Name>ThoughtWorks.CruiseControl.Core</Name>
    <Name>System.Web</Name>
    <Name>NetReflector</Name>
    <Name>NCover.Framework</Name>
    <Name>TypeMock.Integration</Name>
  </FrameworkAssemblies>
  <Report>
    <Section Enabled="True">Application Metrics</Section>
    <Section Enabled="True">Assemblies Metrics</Section>
    <Section Enabled="True">VisualNDepend View</Section>
    <Section Enabled="True">Assemblies Abstractness vs. Instability</Section>
    <Section Enabled="True">Assemblies Dependencies</Section>
    <Section Enabled="True">Assemblies Dependencies Diagram</Section>
    <Section Enabled="True">Assemblies build order</Section>
    <Section Enabled="True">NDepend information and warnings</Section>
    <Section Enabled="True">CQL Queries and Constraints</Section>
    <Section Enabled="True">Types Metrics</Section>
    <Section Enabled="False">Types Dependencies</Section>
  </Report>
  <BuildComparisonSetting ProjectMode="DontCompare" BuildMode="MostRecentBuildAvailable" ProjectFileToCompareWith="" BuildFileToCompareWith="" NDaysAgo="0" />
  <WarnFilter WarnNotUsedType="True" WarnNotUsedMember="True" WarnTypeVisibility="False" WarnPropertiesVisibility="False" WarnMethodsVisibility="False" WarnConstructorsVisibility="False" WarnFieldsVisibility="False" WarnEventsVisibility="False" WarnAssemblyVersioningIssues="True" WarnPDBIssues="True" /><CQLQueries>
   
    <CQLGroup Name="Source Code Quality constraints" Active="True">
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">// <Name>Methods too big (NbLinesOfCode)</Name>\r\nWARN IF Count &gt; 0 IN SELECT TOP 10 METHODS WHERE NbLinesOfCode &gt; 30 ORDER BY NbLinesOfCode DESC\r\n// METHODS WHERE NbLinesOfCode &gt; 30 are extremely complex and \r\n// should be split in smaller methods \r\n// (except if they are automatically generated by a tool).\r\n// See the definition of the NbLinesOfCode metric here http://www.ndepend.com/Metrics.aspx#NbLinesOfCode</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">// <Name>Methods too complex (CyclomaticComplexity)</Name>\r\nWARN IF Count &gt; 0 IN SELECT TOP 10 METHODS WHERE CyclomaticComplexity &gt; 20 ORDER BY CyclomaticComplexity DESC\r\n// METHODS WHERE CyclomaticComplexity &gt; 15 are hard to understand and maintain.\r\n// METHODS WHERE CyclomaticComplexity &gt; 30 are extremely complex and should be split \r\n// in smaller methods (except if they are automatically generated by a tool).\r\n// See the definition of the CyclomaticComplexity metric here http://www.ndepend.com/Metrics.aspx#CC</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">// <Name>Methods poorly commented</Name>\r\nWARN IF Count &gt; 0 IN SELECT TOP 10 METHODS WHERE PercentageComment &lt; 20 AND NbLinesOfCode > 10  ORDER BY PercentageComment ASC\r\n// METHODS WHERE %Comment &lt; 20 and that have at least 10 lines of code should be more commented.\r\n// See the definition of the PercentageComment metric here http://www.ndepend.com/Metrics.aspx#PercentageComment</CQLQuery>
    </CQLGroup>
    <CQLGroup Name="Code Quality constraints" Active="True">
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">// <Name>Methods too big (NbILInstructions)</Name>\r\nWARN IF Count &gt; 0 IN SELECT TOP 10 METHODS WHERE NbILInstructions &gt; 200 ORDER BY NbILInstructions DESC\r\n// METHODS WHERE NbILInstructions &gt; 200 are extremely complex and \r\n// should be split in smaller methods \r\n// (except if they are automatically generated by a tool).\r\n// See the definition of the NbILInstructions metric here http://www.ndepend.com/Metrics.aspx#NbILInstructions</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">// <Name>Methods too complex (ILCyclomaticComplexity)</Name>\r\nWARN IF Count &gt; 0 IN SELECT TOP 10 METHODS WHERE ILCyclomaticComplexity &gt; 40 ORDER BY ILCyclomaticComplexity DESC\r\n// METHODS WHERE ILCyclomaticComplexity &gt; 20 are hard to understand and maintain.\r\n// METHODS WHERE ILCyclomaticComplexity &gt; 40 are extremely complex and should be split \r\n// in smaller methods (except if they are automatically generated by a tool).\r\n// See the definition of the ILCyclomaticComplexity metric here http://www.ndepend.com/Metrics.aspx#ILCC</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">// <Name>Methods with too many parameters</Name>\r\nWARN IF Count &gt; 0 IN SELECT TOP 10 METHODS WHERE NbParameters &gt; 5 ORDER BY NbParameters DESC\r\n// METHODS WHERE NbParameters &gt; 5 might be painful to call and might degrade performance. \r\n// You should prefer using additional properties/fields to the declaring type to handle \r\n// numerous states. Another alternative is to provide a class or structure dedicated to \r\n// handle arguments passing (for example see the class System.Diagnostics.ProcessStartInfo \r\n// and the method System.Diagnostics.Process.Start(ProcessStartInfo))\r\n// See the definition of the NbParameters metric here http://www.ndepend.com/Metrics.aspx#NbParameters</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">// <Name>Methods with too many local variables</Name>\r\nWARN IF Count &gt; 0 IN SELECT TOP 10 METHODS WHERE NbVariables &gt; 15 ORDER BY NbVariables DESC\r\n// METHODS WHERE NbVariables &gt; 8 are hard to understand and maintain.\r\n// METHODS WHERE NbVariables &gt; 15 are extremely complex and should be split in \r\n// smaller methods (except if they are automatically generated by a tool).\r\n// See the definition of the Nbvariables metric here http://www.ndepend.com/Metrics.aspx#Nbvariables</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">// <Name>Types with too many methods</Name>\r\nWARN IF Count &gt; 0 IN SELECT TOP 10 TYPES WHERE NbMethods &gt; 20 ORDER BY NbMethods DESC\r\n// TYPES WHERE NbMethods &gt; 20 might be hard to understand and maintain \r\n// but there might be cases where it is relevant to have a high value for NbMethods. \r\n// For example, the System.Windows.Forms.DataGridView standard class has more than 1000 methods.\r\n// See the definition of the NbMethods metric here http://www.ndepend.com/Metrics.aspx#NbMethods</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">// <Name>Types with too many fields</Name>\r\nWARN IF Count &gt; 0 IN SELECT TOP 10 TYPES WHERE NbFields &gt; 20 AND !IsEnumeration ORDER BY NbFields DESC\r\n// TYPES WHERE NbFields &gt; 20 AND !IsEnumeration might be hard to understand and maintain \r\n// but there might be cases where it is relevant to have a high value for NbFields. \r\n// For example, the System.Windows.Forms.Control standard class has more than 200 fields. \r\n// The value of the metric NbFields might be a better indicator of complex type.\r\n// See the definition of the NbFields metric here http://www.ndepend.com/Metrics.aspx#NbFields</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">// <Name>Quick summary of methods to refactor</Name>\r\nWARN IF Count &gt; 0 IN SELECT TOP 10 METHODS WHERE \r\n     (  NbILInstructions &gt; 200 OR \r\n        ILCyclomaticComplexity &gt; 50 OR \r\n        NbParameters &gt; 5 OR \r\n        NbVariables &gt; 8) \r\n     AND \r\n// Here is a way to avoid to take account of generated methods.\r\n// Another way would be to use the SELECT METHODS FROM or SELECT METHODS OUT OF facilities.\r\n     !( NameLike "InitializeComponent" OR NameLike "Generated") </CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">// <Name>Types with poor cohesion (LCOM)</Name>\r\nWARN IF Count &gt; 0 IN SELECT TOP 10 TYPES WHERE LCOM &gt; 0.8 AND NbFields &gt; 10 AND NbMethods &gt;10 ORDER BY LCOM DESC\r\n// TYPES WHERE LCOM &gt; 0.8 AND NbFields &gt; 10 AND NbMethods &gt;10 might be problematic. \r\n// However, it is very hard to avoid such non-cohesive types. The LCOMHS metric\r\n// is often considered as more efficient to detect non-cohesive types.\r\n// See the definition of the LCOM metric here http://www.ndepend.com/Metrics.aspx#LCOM</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">// <Name>Types with poor cohesion (LCOMHS)</Name>\r\nWARN IF Count &gt; 0 IN SELECT TOP 10 TYPES WHERE LCOMHS &gt; 0.95 AND NbFields &gt; 10 AND NbMethods &gt;10 ORDER BY LCOMHS DESC\r\n// TYPES WHERE LCOMHS &gt; 1.0 AND NbFields &gt; 10 AND NbMethods &gt;10 should be avoided. \r\n// Note that this constraint is stronger than the constraint \r\n// TYPES WHERE LCOM &gt; 0.8 AND NbFields &gt; 10 AND NbMethods &gt;10. \r\n// See the definition of the LCOMHS metric here http://www.ndepend.com/Metrics.aspx#LCOMHS</CQLQuery>
     </CQLGroup>
    <CQLGroup Name="Performance constraints" Active="True">
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">// <Name>Types which instances are too big (SizeOfInst)</Name>\r\nWARN IF Count &gt; 0 IN SELECT TOP 10 TYPES WHERE SizeOfInst &gt; 64 ORDER BY SizeOfInst DESC\r\n// TYPES WHERE SizeOfInst &gt; 64 might degrade performance (depending on the number of \r\n// instances created at runtime) and might be hard to maintain. \r\n// However it is not a rule since sometime there is no alternative \r\n// (the size of instances of the System.Net.NetworkInformation.SystemIcmpV6Statistics \r\n// standard class is 2064 bytes).\r\n// See the definition of the SizeOfInst metric here http://www.ndepend.com/Metrics.aspx#SizeOfInst</CQLQuery>
      <CQLQuery Active="True" DisplayList="False" DisplayStat="True">// <Name>Methods that use boxing/unboxing</Name>\r\nWARN IF Percentage &gt; 5 IN SELECT METHODS WHERE IsUsingBoxing OR IsUsingUnboxing \r\n// Thanks to generics, boxing and unboxing should be rare.</CQLQuery>
      <CQLQuery Active="True" DisplayList="False" DisplayStat="True">// <Name>Types that use boxing/unboxing</Name>\r\nWARN IF Percentage &gt; 5 IN SELECT TYPES WHERE IsUsingBoxing OR IsUsingUnboxing \r\n// Thanks to generics, boxing and unboxing should be rare.</CQLQuery>
    </CQLGroup>
    <CQLGroup Name="Design constraints" Active="True">
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">// <Name>Assemblies that contain namespaces dependency cycles</Name>\r\nWARN IF Count &gt; 0 IN SELECT TOP 10 ASSEMBLIES WHERE ContainsNamespaceDependencyCycle\r\n// Dependency cycles between namespaces must be avoided \r\n// in order to have a levelized and comprehensive design.\r\n// More info available on the screencast 'Reduce the complexity' http://s3.amazonaws.com/NDependOnlineDemos/NDependReducingComplexity_viewlet_swf.html\r\n// You can also read this article http://www.theserverside.net/tt/articles/showarticle.tss?id=ControllingDependencies</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">// <Name>Potentially unused methods</Name>\r\nWARN IF Count &gt; 0 IN SELECT TOP 10 METHODS WHERE \r\n MethodCa == 0 AND            // Ca=0 -> No Afferent Coupling -> The method is not used in the context of this application.\r\n !IsPublic AND                // Public methods might be used by client applications of your assemblies.\r\n !IsEntryPoint AND            // Main() method is not used by-design.\r\n !IsExplicitInterfaceImpl AND // The IL code never explicitely calls explicit interface methods implementation.\r\n !IsClassConstructor AND      // The IL code never explicitely calls class constructors.\r\n !IsFinalizer                 // The IL code never explicitely calls finalizers.\r\n</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">// <Name>Potentially unused fields</Name>\r\nWARN IF Count &gt; 0 IN SELECT TOP 10 FIELDS WHERE \r\n FieldCa == 0 AND  // Ca=0 -> No Afferent Coupling -> The field is not used in the context of this application.\r\n !IsPublic AND     // Although not recommended, public fields might be used by client applications of your assemblies.\r\n !IsLiteral AND    // The IL code never explicitely uses literal fields.\r\n !IsEnumValue AND  // The IL code never explicitely uses enumeration value.\r\n !NameIs "value__" // Field named 'value__' are relative to enumerations and the IL code never explicitely uses them.</CQLQuery>      
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">// <Name>Potentially unused types</Name>\r\nWARN IF Count &gt; 0 IN SELECT TOP 10 TYPES WHERE \r\n TypeCa == 0 AND // Ca=0 -> No Afferent Coupling -> The type is not used in the context of this application.\r\n !IsPublic       // Public types might be used by client applications of your assemblies.\r\n</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">// <Name>Stateless types that might be static</Name>\r\nWARN IF Count &gt; 0 IN SELECT TOP 10 TYPES WHERE SizeOfInst ==0 AND !IsStatic AND !IsGeneric AND !IsInterface \r\n// It indicates stateless types that might eventually be turned into static classes.\r\n// See the definition of the SizeOfInst metric here http://www.ndepend.com/Metrics.aspx#SizeOfInst</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">// <Name>Inheritance tree too deep</Name>\r\nWARN IF Count &gt; 0 IN SELECT TOP 10 TYPES WHERE DepthOfInheritance >= 6 ORDER BY DepthOfInheritance DESC \r\n// Branches too long in the derivation should be avoided.\r\n// See the definition of the DepthOfInheritance metric here http://www.ndepend.com/Metrics.aspx#DIT</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">// <Name>Classes that should be sealed</Name>\r\nWARN IF Count &gt; 0 IN SELECT TOP 10 TYPES WHERE IsClass AND NbChildren ==0 AND !IsSealed AND !IsStatic ORDER BY NbLinesOfCode \r\n // Classes with no descendant should be sealed.</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">// <Name>Assemblies that don't satisfy the Abstractness/Instability principle</Name>\r\nWARN IF Percentage &gt; 15 IN SELECT ASSEMBLIES WHERE NormDistFromMainSeq &gt; 0.7 ORDER BY NormDistFromMainSeq DESC\r\n// See the definition of the NormDistFromMainSeq metric here http://www.ndepend.com/Metrics.aspx#DitFromMainSeq</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">// <Name>Assemblies with poor cohesion (RelationalCohesion)</Name>\r\nWARN IF Count &gt; 0 IN SELECT TOP 10 ASSEMBLIES WHERE RelationalCohesion &lt; 1.5 OR RelationalCohesion &gt; 4.0\r\n// As classes inside an assembly should be strongly related, \r\n// the cohesion should be high. On the other hand, a value which is too high may \r\n// indicate over-coupling. A good range for RelationalCohesion is 1.5 to 4.0.\r\n// See the definition of the RelationalCohesion metric here http://www.ndepend.com/Metrics.aspx#RelationalCohesion</CQLQuery>
    </CQLGroup>
    <CQLGroup Name="Naming constraints" Active="True">
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">// <Name>Misnamed instance fields</Name>\r\nWARN IF Count &gt; 0 IN SELECT TOP 10 FIELDS WHERE NameLike "^m_" AND IsStatic\r\n// A static field should not be named 'm_XXX'.</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">// <Name>Misnamed static fields</Name>\r\nWARN IF Count &gt; 0 IN SELECT TOP 10 FIELDS WHERE NameLike "^s_" AND !IsStatic\r\n// A non-static field should not be named 's_XXX'.</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">// <Name>Misnamed interfaces</Name>\r\nWARN IF Count &gt; 0 IN SELECT TOP 10 TYPES WHERE IsInterface AND !NameLike "^I" AND !IsNested AND !IsInFrameworkAssembly\r\n// The name of a non-nested interface should begin with a 'I'.</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">// <Name>Misnamed exception classes</Name>\r\nWARN IF Count &gt; 0 IN SELECT TOP 10 TYPES WHERE IsExceptionClass AND !NameLike "Exception$" AND !IsInFrameworkAssembly\r\n// The name of an exception class should end with 'Exception'.</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">// <Name>Misnamed attribute classes</Name>\r\nWARN IF Count &gt; 0 IN SELECT TOP 10 TYPES WHERE IsAttributeClass AND !NameLike "Attribute$" AND !IsInFrameworkAssembly\r\n// The name of an attribute class should end with 'Attribute'.</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">// <Name>Misnamed types</Name>\r\nWARN IF Count &gt; 0 IN SELECT TOP 10 TYPES WHERE \r\n !NameLike "^[A-Z]" AND     // The name of a type should begin with an Upper letter.\r\n !IsGeneratedByCompiler AND // Except if it is generated by compiler or ...\r\n !IsInFrameworkAssembly     // ... if it is declared in a framework assembly.</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">// <Name>Misnamed methods</Name>\r\nWARN IF Count &gt; 0 IN SELECT TOP 10 METHODS WHERE \r\n !NameLike "^[A-Z]" AND \r\n !(IsClassConstructor OR IsConstructor OR \r\n IsPropertyGetter  OR IsPropertySetter OR\r\n IsIndexerGetter OR IsIndexerSetter OR\r\n IsEventAdder OR IsEventRemover OR\r\n IsOperator) AND !IsGeneratedByCompiler AND !IsInFrameworkAssembly\r\n// The name of a regular method should begin with an Upper letter.</CQLQuery>
    </CQLGroup>
    <CQLGroup Name="Queries to understand code" Active="True">
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">// <Name>Most used types (TypeRank)</Name>\r\nSELECT TOP 50 TYPES ORDER BY TypeRank DESC\r\n// TypeRank values are computed by applying the Google PageRank \r\n// algorithm on the graph of types' dependencies \r\n// Types with high Rank are the most used ones.\r\n// See the definition of the TypeRank metric here http://www.ndepend.com/Metrics.aspx#TypeRank</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">// <Name>Most used methods (MethodRank)</Name>\r\nSELECT TOP 50 METHODS ORDER BY MethodRank DESC\r\n// MethodRank values are computed by applying the Google PageRank \r\n// algorithm on the graph of methods' dependencies\r\n// Methods with high Rank are the most used ones.\r\n// See the definition of the MethodRank metric here http://www.ndepend.com/Metrics.aspx#MethodRank</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">// <Name>Most used namespaces (NamespaceCa)</Name>\r\nSELECT TOP 50 NAMESPACES ORDER BY NamespaceCa DESC\r\n// The Afferent Coupling for a particular namespace is the number of namespaces that depends directly on it.\r\n// Namespaces with high Ca are the most used ones.\r\n// See the definition of the NamespaceCa metric here http://www.ndepend.com/Metrics.aspx#NamespaceCa</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">// <Name>Most used types  (TypeCa)</Name>\r\nSELECT TOP 50 TYPES ORDER BY TypeCa DESC\r\n// The Afferent Coupling for a particular type is the number of types that depends directly on it.\r\n// Types with high Ca are the most used ones.\r\n// See the definition of the TypeCa metric here http://www.ndepend.com/Metrics.aspx#TypeCa</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">// <Name>Most used methods (MethodCa)</Name>\r\nSELECT TOP 50 METHODS ORDER BY MethodCa DESC\r\n// The Afferent Coupling for a particular method is the number of methods that depends directly on it.\r\n// Methods with high Ca are the most used ones\r\n// See the definition of the MethodCa metric here http://www.ndepend.com/Metrics.aspx#MethodCa</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">// <Name>Namespaces that use many other namespaces (NamespaceCe)</Name>\r\nSELECT TOP 50 NAMESPACES ORDER BY NamespaceCe DESC\r\n// The Efferent Coupling for a particular namespace is the number of namespaces it directly depends on.\r\n// Namespaces declared in Framework assemblies are taken account.\r\n// See the definition of the NamespaceCe metric here http://www.ndepend.com/Metrics.aspx#NamespaceCe</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">// <Name>Types that use many other types (TypeCe)</Name>\r\nSELECT TOP 50 TYPES ORDER BY TypeCe DESC\r\n// The Efferent Coupling for a particular type is the number of types it directly depends on.\r\n// Types declared in Framework assemblies are taken account.\r\n// See the definition of the TypeCe metric here http://www.ndepend.com/Metrics.aspx#TypeCe</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">// <Name>Methods that use many other methods (MethodCe)</Name>\r\nSELECT TOP 50 METHODS ORDER BY MethodCe DESC\r\n// The Efferent Coupling for a particular method is the number of methods it directly depends on.\r\n// Methods declared in Framework assemblies are taken account.\r\n// See the definition of the MethodCe metric here http://www.ndepend.com/Metrics.aspx#MethodCe</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">// <Name>High-level to low-level assemblies (AssemblyLevel)</Name>\r\nSELECT ASSEMBLIES ORDER BY AssemblyLevel DESC\r\n// Classify assemblies by their Level values.\r\n// See the definition of the AssemblyLevel metric here http://www.ndepend.com/Metrics.aspx#Level</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">// <Name>High-level to low-level namespaces (NamespaceLevel)</Name>\r\nSELECT NAMESPACES ORDER BY NamespaceLevel DESC\r\n// Classify namespaces by their Level values.\r\n// See the definition of the NamespaceLevel metric here http://www.ndepend.com/Metrics.aspx#Level</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">// <Name>High-level to low-level types (TypeLevel)</Name>\r\nSELECT TYPES ORDER BY TypeLevel DESC\r\n// Classify types by their Level values.\r\n// See the definition of the TypeLevel metric here http://www.ndepend.com/Metrics.aspx#Level</CQLQuery>
      <CQLQuery Active="True" DisplayList="True" DisplayStat="True">// <Name>High-level to low-level methods (MethodLevel)</Name>\r\nSELECT METHODS ORDER BY MethodLevel DESC\r\n// Classify methods by their Level values.\r\n// See the definition of the MethodLevel metric here http://www.ndepend.com/Metrics.aspx#Level</CQLQuery>
    </CQLGroup>
  </CQLQueries><FormSettings MainWindowState="2" LocationX="97" LocationY="-4" SizeWidth="1507" SizeHeight="1208" SplitterDistance1="326" SplitterDistance2="493" SplitterDistance3="377" /></NDepend>