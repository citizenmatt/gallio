// Copyright 2005-2010 Gallio Project - http://www.gallio.org/
// Portions Copyright 2000-2004 Jonathan de Halleux
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using System;
using Gallio.Runtime.ProgressMonitoring;
using Gallio.Runner.Reports;

namespace Gallio.Reports
{
    /// <summary>
    /// <para>
    /// Formats MIME HTML archive reports similar to the web archives generated by Internet Explorer.
    /// The report can then be sent to recipients as a single file.
    /// </para>
    /// <para>
    /// Unfortunately the format is non-standard and cannot be read by most other browsers.
    /// </para>
    /// </summary>
    public class MHtmlReportFormatter : BaseReportFormatter
    {
        private readonly IReportFormatter htmlReportFormatter;

        /// <summary>
        /// Creates a report formatter.
        /// </summary>
        /// <param name="htmlReportFormatter">The HTML report formatter.</param>
        /// <exception cref="ArgumentNullException">Thrown if <paramref name="htmlReportFormatter"/> is null.</exception>
        public MHtmlReportFormatter(IReportFormatter htmlReportFormatter)
        {
            if (htmlReportFormatter == null)
                throw new ArgumentNullException("htmlReportFormatter");

            this.htmlReportFormatter = htmlReportFormatter;
        }

        /// <inheritdoc />
        public override void Format(IReportWriter reportWriter, ReportFormatterOptions formatterOptions, IProgressMonitor progressMonitor)
        {
            using (progressMonitor.BeginTask("Formatting report.", 10))
            {
                using (MultipartMimeReportContainer archiveContainer = new MultipartMimeReportContainer(reportWriter.ReportContainer))
                {
                    string archivePath = archiveContainer.ReportName + ".mht";
                    reportWriter.AddReportDocumentPath(archivePath);

                    archiveContainer.OpenArchive(archivePath);
                    progressMonitor.Worked(0.5);

                    DefaultReportWriter archiveWriter = new DefaultReportWriter(reportWriter.Report, archiveContainer);
                    using (IProgressMonitor subProgressMonitor = progressMonitor.CreateSubProgressMonitor(9))
                        htmlReportFormatter.Format(archiveWriter, formatterOptions, subProgressMonitor);

                    archiveContainer.CloseArchive();
                    progressMonitor.Worked(0.5);
                }
            }
        }
    }
}
