// Copyright 2005-2010 Gallio Project - http://www.gallio.org/
// Portions Copyright 2000-2004 Jonathan de Halleux
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using Gallio.Framework.Pattern;

namespace Gallio.Framework.Pattern
{
    /// <summary>
    /// A decorator attribute applies contributions to a test component in scope
    /// such as a test or test parameter generated by some other pattern attribute.
    /// </summary>
    /// <remarks>
    /// <para>
    /// Occasionally the order in which decorators are applied is significant so this type provides a <see cref="Order" /> 
    /// property to specify an explicit ordering when required. All decorators that apply to a given test component 
    /// declaration are applied in increasing <see cref="Order" />.
    /// </para>
    /// </remarks>
    public abstract class DecoratorPatternAttribute : PatternAttribute
    {
        private int order = 0;

        /// <summary>
        /// Gets or sets the order in which the decorator should be applied.
        /// </summary>
        /// <remarks>
        /// <para>
        /// Decorators with lower order indices values are applied before decorators with
        /// higher ones. In the case of a tie, an arbitrary choice is
        /// made among decorators with the same order index to determine the order in
        /// which they will be processed.
        /// </para>
        /// </remarks>
        /// <value>
        /// The default order index is 0.
        /// </value>
        public int Order
        {
            get { return order; }
            set { order = value; }
        }
    }
}